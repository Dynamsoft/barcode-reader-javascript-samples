{"version":3,"sources":["logo.svg","dbr.js","components/BarcodeScanner.js","components/HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["DBR","BarcodeReader","engineResourcePath","BarcodeScanner","props","bDestroyed","pScanner","elRef","React","createRef","a","this","createInstance","scanner","destroy","current","appendChild","getUIElement","document","getElementsByClassName","style","display","onFrameRead","results","result","appendMessage","format","barcodeFormatString","text","barcodeText","type","indexOf","msg","exception","message","open","console","error","ref","width","height","Component","HelloWorld","scrollToBottom","refDivMessage","scrollTop","scrollHeight","setState","prevState","resultValue","resultItems","concat","showScanner","bShowScanner","state","libLoaded","loadWasm","alert","className","src","reactLogo","alt","value","readOnly","placeholder","id","fontSize","float","map","item","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0297f6bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import DBR from \"dynamsoft-javascript-barcode\";\r\n\r\n/** LICENSE ALERT - README\r\n * The library requires a license to work. If no license is specified, a 7-day built-in\r\n * trial license will be used by default which is the case in this sample.\r\n * Note that network connection is required for this built-in license to work.\r\n */\r\n\r\n/* When using your own license, uncomment the following line and specify your own license string. */\r\n\r\n// DBR.initLicense(\"DLS2eyJvcmdhbml6YXR****\");\r\n\r\n/** If you don't have a license yet, you can request a trial on this page:\r\n * https://www.dynamsoft.com/customer/license/trialLicense?product=dbr&package=js&utm_source=sample\r\n * or, you can purchase a license on this page:\r\n * https://www.dynamsoft.com/store/dynamsoft-barcode-reader/#js?product=dbr&package=js&utm_source=sample\r\n */\r\n\r\n/** LICENSE ALERT - THE END */\r\n\r\nDBR.BarcodeReader.engineResourcePath = \"https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@8.8.0/dist/\";\r\n\r\nexport default DBR;","import DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport './BarcodeScanner.css';\r\n\r\nclass BarcodeScanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.bDestroyed = false;\r\n        this.pScanner = null;\r\n        this.elRef = React.createRef();\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            this.pScanner = this.pScanner || DBR.BarcodeScanner.createInstance()\r\n            let scanner = await this.pScanner;\r\n\r\n            if (this.bDestroyed) {\r\n                scanner.destroy();\r\n                return;\r\n            }\r\n            this.elRef.current.appendChild(scanner.getUIElement());\r\n            document.getElementsByClassName(\"dbrScanner-btn-close\")[0].style.display = \"none\";\r\n            scanner.onFrameRead = results => {\r\n                for (let result of results) {\r\n                    this.props.appendMessage({ format: result.barcodeFormatString, text: result.barcodeText, type: \"result\" });\r\n\r\n                    if (result.barcodeText.indexOf(\"Attention(exceptionCode\") !== -1) {\r\n                        this.props.appendMessage({ msg: result.exception.message, type: \"error\" });\r\n                    }\r\n                }\r\n            };\r\n            await scanner.open();\r\n        } catch (ex) {\r\n            this.props.appendMessage({ msg: ex.message, type: \"error\" });\r\n            console.error(ex);\r\n        }\r\n    }\r\n    async componentWillUnmount() {\r\n        this.bDestroyed = true;\r\n        if (this.pScanner) {\r\n            (await this.pScanner).destroy();\r\n        }\r\n    }\r\n    shouldComponentUpdate() {\r\n        // Never update UI after mount, dbrjs sdk use native way to bind event, update will remove it.\r\n        return false;\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={this.elRef} style={{ width: \"100%\", height: \"100%\" }}></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarcodeScanner;\r\n","import './HelloWorld.css';\r\nimport reactLogo from '../logo.svg';\r\nimport DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport BarcodeScanner from './BarcodeScanner';\r\n\r\nclass HelloWorld extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.refDivMessage = React.createRef();\r\n        this.state = {\r\n            libLoaded: false,\r\n            resultValue: \"\",\r\n            resultItems: [],\r\n            bShowScanner: false\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            await DBR.BarcodeScanner.loadWasm();\r\n            this.setState(state => {\r\n                state.libLoaded = true;\r\n                return state;\r\n            }, () => {\r\n                this.showScanner();\r\n            });\r\n        } catch (ex) {\r\n            alert(ex.message);\r\n            throw ex;\r\n        }\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.refDivMessage.current.scrollTop = this.refDivMessage.current.scrollHeight;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    appendMessage = (message) => {\r\n        switch (message.type) {\r\n            case \"result\":\r\n                this.setState(prevState => {\r\n                    prevState.resultValue = message.format + \": \" + message.text;\r\n                    prevState.resultItems = prevState.resultItems.concat([{ type: message.format + \": \", text: message.text }]);\r\n                    return prevState;\r\n                });\r\n                break;\r\n            case \"error\":\r\n                this.setState(prevState => {\r\n                    prevState.resultValue = message.msg;\r\n                    prevState.resultItems = prevState.resultItems.concat([{ type: \"Error: \", text: message.msg }]);\r\n                    return prevState;\r\n                });\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    showScanner = () => {\r\n        this.setState({\r\n            bShowScanner: true\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"helloWorld\">\r\n                <h2>Hello World for React<img src={reactLogo} className=\"App-logo\" alt=\"logo\" /></h2>\r\n                <input type=\"text\" value={this.state.resultValue} readOnly={true} className=\"latest-result\" placeholder=\"The Last Read Barcode\" />\r\n                <div id=\"UIElement\">\r\n                    {!this.state.libLoaded ? (<span style={{ fontSize: \"x-large\" }}>Loading Library...</span>) : \"\"}\r\n                    {this.state.bShowScanner ? (<BarcodeScanner appendMessage={this.appendMessage}></BarcodeScanner>) : \"\"}\r\n                </div>\r\n                <div>\r\n                    <span style={{ float: \"left\" }}>All Results:</span><br />\r\n                    <div id=\"results\" ref={this.refDivMessage}>\r\n                        <ul>\r\n                            {this.state.resultItems.map((item, index) => (\r\n                                <li key={100000 + index} ><span>{item.type}</span><span className=\"resultText\">{item.text}</span>                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default HelloWorld;\r\n","import './App.css';\r\nimport HelloWorld from './components/HelloWorld.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HelloWorld></HelloWorld>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}